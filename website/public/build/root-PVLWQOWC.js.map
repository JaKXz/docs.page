{
  "version": 3,
  "sources": ["browser-route-module:/Users/elliothesp/Documents/Code/oss-docs/website/app/root.tsx?browser", "../../app/root.tsx"],
  "sourcesContent": ["export { CatchBoundary, ErrorBoundary, default, links } from \"/Users/elliothesp/Documents/Code/oss-docs/website/app/root.tsx\";", "import { Link, Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useCatch } from 'remix';\nimport type { LinksFunction } from 'remix';\n\nimport tailwind from './tailwind.css';\n\n{\n  /* <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Anton&display=swap\" rel=\"stylesheet\">\n\n</link> */\n}\nexport let links: LinksFunction = () => {\n  return [\n    { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\n    { rel: 'stylesheet', href: tailwind },\n  ];\n};\n\nexport default function App() {\n  return (\n    <Document>\n      <Outlet />\n    </Document>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n  return (\n    <Document title=\"Error!\">\n      <div>\n        <h1>There was an error</h1>\n        <p>{error.message}</p>\n        <hr />\n        <p>Hey, developer, you should replace this with what you want your users to see.</p>\n      </div>\n    </Document>\n  );\n}\n\nexport function CatchBoundary() {\n  let caught = useCatch();\n\n  let message;\n  switch (caught.status) {\n    case 401:\n      message = <p>Oops! Looks like you tried to visit a page that you do not have access to.</p>;\n      break;\n    case 404:\n      message = <p>Oops! Looks like you tried to visit a page that does not exist.</p>;\n      break;\n\n    default:\n      throw new Error(caught.data || caught.statusText);\n  }\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <h1>\n        {caught.status}: {caught.statusText}\n      </h1>\n      {message}\n    </Document>\n  );\n}\n\nfunction Document({ children, title }: { children: React.ReactNode; title?: string }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"dark:bg-[#202528]\">\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === 'development' && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;;ACAA;;;;;;AAKA;AAAA;AAOO,IAAI,QAAuB,MAAM;AACtC,SAAO;AAAA,IACL,EAAE,KAAK,cAAc,MAAM;AAAA,IAC3B,EAAE,KAAK,cAAc,MAAM;AAAA;AAAA;AAIhB,eAAe;AAC5B,SACE,oCAAC,UAAD,MACE,oCAAC,gCAAD;AAAA;AAKC,uBAAuB,EAAE,SAA2B;AACzD,UAAQ,MAAM;AACd,SACE,oCAAC,UAAD;AAAA,IAAU,OAAM;AAAA,KACd,oCAAC,OAAD,MACE,oCAAC,MAAD,MAAI,uBACJ,oCAAC,KAAD,MAAI,MAAM,UACV,oCAAC,MAAD,OACA,oCAAC,KAAD,MAAG;AAAA;AAMJ,yBAAyB;AAC9B,MAAI,SAAS;AAEb,MAAI;AACJ,UAAQ,OAAO;AAAA,SACR;AACH,gBAAU,oCAAC,KAAD,MAAG;AACb;AAAA,SACG;AACH,gBAAU,oCAAC,KAAD,MAAG;AACb;AAAA;AAGA,YAAM,IAAI,MAAM,OAAO,QAAQ,OAAO;AAAA;AAG1C,SACE,oCAAC,UAAD;AAAA,IAAU,OAAO,GAAG,OAAO,UAAU,OAAO;AAAA,KAC1C,oCAAC,MAAD,MACG,OAAO,QAAO,MAAG,OAAO,aAE1B;AAAA;AAKP,kBAAkB,EAAE,UAAU,SAAwD;AACpF,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,QAAD;AAAA,IAAM,SAAQ;AAAA,MACd,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,IAAW,SAAQ;AAAA,MAC7B,QAAQ,oCAAC,SAAD,MAAQ,SAAiB,MAClC,oCAAC,MAAD,OACA,oCAAC,OAAD,QAEF,oCAAC,QAAD;AAAA,IAAM,WAAU;AAAA,KACb,UACD,oCAAC,mBAAD,OACA,oCAAC,SAAD,OAC2C,oCAAC,YAAD;AAAA;",
  "names": []
}
